# Generated by Django 3.2.5 on 2021-08-01 17:28

from django.db import migrations, models
import django.db.models.deletion
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Characteristic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Характеристика',
                'verbose_name_plural': 'Характеристики',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Название')),
                ('description', tinymce.models.HTMLField(blank=True, verbose_name='Описание')),
                ('price', models.IntegerField(verbose_name='Цена')),
                ('old_price', models.IntegerField(blank=True, null=True, verbose_name='Старая цена')),
                ('priority', models.IntegerField(default=1, verbose_name='Приоритет')),
                ('slug', models.SlugField(blank=True)),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('modelwithcategory_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.modelwithcategory')),
                ('name', models.CharField(max_length=64, verbose_name='Название')),
                ('slug', models.SlugField(blank=True)),
            ],
            options={
                'verbose_name': 'Категория продуктов',
                'verbose_name_plural': 'Категории продуктов',
            },
            bases=('base.modelwithcategory',),
        ),
        migrations.CreateModel(
            name='ProductTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Параметр продуктов',
                'verbose_name_plural': 'Параметры продуктов',
            },
        ),
        migrations.CreateModel(
            name='ProductUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, max_length=256, verbose_name='Описание')),
                ('article', models.CharField(blank=True, max_length=128, verbose_name='Артикул')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_units', to='products.product', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Единица продуктов',
                'verbose_name_plural': 'Единицы продуктов',
            },
        ),
        migrations.CreateModel(
            name='ProductUnitBookingDates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_from', models.DateField(verbose_name='Бронь от')),
                ('date_to', models.DateField(verbose_name='Бронь до')),
                ('total_price', models.IntegerField(blank=True, null=True, verbose_name='Полная цена')),
                ('product_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booking_dates', to='products.productunit', verbose_name='Единица продукта')),
            ],
            options={
                'verbose_name': 'Бронь',
                'verbose_name_plural': 'Брони',
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='static/img/products/', verbose_name='Изображение')),
                ('thumb', models.ImageField(blank=True, editable=False, upload_to='static/img/products/')),
                ('is_main', models.BooleanField(default=False, verbose_name='Главное')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Изображение',
                'verbose_name_plural': 'Изображения',
            },
        ),
        migrations.CreateModel(
            name='ProductCharacteristic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=64, verbose_name='Значение')),
                ('characteristic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.characteristic', verbose_name='Характеристика')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='characteristics', to='products.product', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Характеристика продуктов',
                'verbose_name_plural': 'Характеристики продуктов',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='products.productcategory', verbose_name='Категория'),
        ),
        migrations.AddField(
            model_name='product',
            name='tags',
            field=models.ManyToManyField(blank=True, default=None, to='products.ProductTag', verbose_name='Параметры'),
        ),
    ]
